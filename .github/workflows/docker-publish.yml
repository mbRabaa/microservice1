name: CI/CD - Pipeline DevOps avec Terraform

on:
  push:
    branches:
      - main

env:
  # Configuration de base
  SONAR_HOST_URL: http://localhost:9000
  K3S_VERSION: v1.26.5+k3s1
  TERRAFORM_VERSION: 1.5.5
  NAMESPACE: microservice
  DOCKER_REGISTRY: docker.io
  NODE_VERSION: 20
  
  # Configuration Monitoring
  PROMETHEUS_PORT: 9090
  GRAFANA_PORT: 3000
  GRAFANA_ADMIN_PASSWORD: rabaa123
  
  # Configuration Email
  YOUR_EMAIL: elmbarkirabea@gmail.com
  EMAIL_FROM: "GitHub Actions <actions@github.com>"

jobs:
  setup-and-test:
    name: "1. Installation et Tests"
    runs-on: ubuntu-latest
    
    steps:
      - name: "🛎️ Checkout du code"
        uses: actions/checkout@v4.1.1

      - name: "⎔ Configurer Node.js"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "📦 Installer les dépendances"
        run: npm ci

      - name: "🧪 Tests Unitaires"
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: "🔗 Tests d'Intégration"
        run: npm run test:integration
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: testuser
          DB_PASSWORD: testpass
          NODE_ENV: test

      - name: "🛠️ Build de l'application"
        run: npm run build

  sonarqube-analysis:
    name: "2. Analyse SonarQube"
    needs: setup-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: "🛎️ Checkout du code"
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: "🐳 Démarrer SonarQube"
        run: |
          docker run -d \
            --name sonarqube \
            -p 9000:9000 \
            -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
            sonarqube:9.9.1-community
          timeout 300 bash -c 'while ! curl -sSf ${{ env.SONAR_HOST_URL }}/api/system/status | grep -q "\"status\":\"UP\""; do
            sleep 10
            echo "En attente du démarrage..."
          done'

      - name: "🔑 Générer token SonarQube"
        run: |
          SONAR_TOKEN=$(curl -sS -u admin:admin \
            -X POST "${{ env.SONAR_HOST_URL }}/api/user_tokens/generate" \
            -d "name=github-action-$(date +%s)" \
            | jq -r '.token')
          echo "SONAR_TOKEN=$SONAR_TOKEN" >> $GITHUB_ENV
          echo "::add-mask::$SONAR_TOKEN"

      - name: "🔍 Exécuter analyse SonarQube"
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=gestion-trajet-app
            -Dsonar.sources=src
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: "🧹 Nettoyer SonarQube"
        if: always()
        run: docker rm -f sonarqube || true

  docker-deploy:
    name: "3. Déploiement Docker et Kubernetes"
    needs: sonarqube-analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: "🛎️ Checkout du code"
        uses: actions/checkout@v4.1.1

      - name: "🔐 Login Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: "🏗️ Build Docker"
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/gestion-trajet:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/gestion-trajet:latest

      - name: "🖥️ Installer K3s"
        run: |
          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=${{ env.K3S_VERSION }} sh -
          sudo chmod 644 /etc/rancher/k3s/k3s.yaml

      - name: "⚙️ Configurer kubectl"
        run: |
          mkdir -p $HOME/.kube
          sudo cp /etc/rancher/k3s/k3s.yaml $HOME/.kube/config
          sudo chown $(id -u):$(id -g) $HOME/.kube/config

      - name: "⚙️ Installer Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: "🚀 Déployer avec Terraform"
        working-directory: ./infra
        env:
          TF_VAR_docker_username: ${{ secrets.DOCKER_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_image_tag: ${{ github.sha }}
        run: |
          terraform init
          terraform validate
          terraform apply -auto-approve

      - name: "🔍 Vérifier le déploiement"
        run: |
          kubectl get pods,svc,deploy -n ${{ env.NAMESPACE }}
          echo "Service URL: $(terraform -chdir=infra output -raw service_url)"

  monitoring-deploy:
    name: "4. Déploiement Monitoring"
    needs: docker-deploy
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: "🛎️ Checkout du code"
        uses: actions/checkout@v4.1.1
    
      - name: "📦 Installer Docker Compose"
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
    
      - name: "🧹 Nettoyer l'environnement"
        working-directory: ./monitoring
        run: |
          docker-compose down -v --remove-orphans || true
          sudo rm -rf grafana-storage || true
          mkdir -p grafana-storage

      - name: "🚀 Démarrer les services"
        working-directory: ./monitoring
        run: |
          docker-compose up -d
          echo "Attente initiale (30s) pour l'initialisation..."
          sleep 30

      - name: "🔍 Vérifier l'état des conteneurs"
        working-directory: ./monitoring
        run: |
          # Vérifier que tous les services sont en cours d'exécution
          if docker-compose ps | grep -v "Up" | grep -q -v "STATUS"; then
            echo "❌ Certains services ne sont pas démarrés:"
            docker-compose ps
            echo "Logs des services:"
            docker-compose logs
            exit 1
          fi
          echo "✅ Tous les services sont en cours d'exécution"

      - name: "⏳ Attendre Grafana (avec timeout long)"
        working-directory: ./monitoring
        run: |
          echo "Attente du démarrage complet de Grafana (peut prendre plusieurs minutes)..."
          start_time=$(date +%s)
          timeout 600 bash -c 'until curl -s http://localhost:3000/api/health | grep -q "\"database\":\"ok\""; do
            sleep 10
            echo "Temps écoulé: $(($(date +%s) - start_time))s"
            
            # Vérifier que le conteneur est toujours en cours d'exécution
            if ! docker-compose ps | grep grafana | grep -q "Up"; then
              echo "❌ Le conteneur Grafana s'est arrêté"
              docker-compose logs grafana
              exit 1
            fi
          done'
          echo "✅ Grafana prêt après $(($(date +%s) - start_time)) secondes"

      - name: "📈 Configurer Grafana avec réessais"
        working-directory: ./monitoring
        run: |
          for attempt in {1..5}; do
            echo "Tentative $attempt/5 de configuration..."
            response=$(curl -s -o /dev/null -w "%{http_code}" \
              -X POST "http://localhost:3000/api/datasources" \
              -H "Content-Type: application/json" \
              -u "admin:${{ env.GRAFANA_ADMIN_PASSWORD }}" \
              -d '{
                "name":"Prometheus",
                "type":"prometheus",
                "url":"http://prometheus:9090",
                "access":"proxy",
                "basicAuth":false
              }')
            
            if [ "$response" -eq 200 ]; then
              echo "✅ Configuration réussie"
              break
            elif [ "$response" -eq 409 ]; then
              echo "ℹ️ La source existe déjà"
              break
            else
              echo "Échec (HTTP $response), nouvel essai dans 15s..."
              sleep 15
            fi
            
            if [ $attempt -eq 5 ]; then
              echo "❌ Échec après 5 tentatives"
              docker-compose logs grafana
              exit 1
            fi
          done

      - name: "📝 Générer rapport"
        working-directory: ./monitoring
        run: |
          echo "# Rapport de Monitoring" > report.md
          echo "## État des services" >> report.md
          docker-compose ps >> report.md
          echo "## Métriques NGINX" >> report.md
          curl -s http://localhost:9113/metrics | head -n 20 >> report.md
          echo "## Targets Prometheus" >> report.md
          curl -s http://localhost:9090/api/v1/targets | jq . >> report.md

  notify:
    name: "5. Notifications"
    needs: [docker-deploy, monitoring-deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: "🌐 Récupérer l'URL"
        id: prod-url
        run: |
          cd infra
          echo "PROD_URL=$(terraform output -raw service_url)" >> $GITHUB_OUTPUT
          cd ..

      - name: "📧 Envoyer notification"
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          from: ${{ env.EMAIL_FROM }}
          to: ${{ env.YOUR_EMAIL }}
          subject: "Déploiement terminé - ${{ github.repository }}"
          body: |
            Statut: ${{ job.status }}
            Commit: ${{ github.sha }}
            URL: ${{ steps.prod-url.outputs.PROD_URL }}
            Date: $(date)
          attachments: monitoring/report.md