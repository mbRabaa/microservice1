name: CI/CD - Docker Build & Deploy

on:
  push:
    branches:
      - main

jobs:
  test-before-build:
    runs-on: ubuntu-latest
    steps:
      - name: 🛎️ Checkout du code
        uses: actions/checkout@v3

      - name: 📦 Installer les dépendances
        run: npm install

      - name: 🎯 Lancer les tests unitaires
        run: npm test

      - name: 🔍 Linting du code
        run: npm run lint

  build-and-push:
    runs-on: ubuntu-latest
    needs: test-before-build  # 🚨 Exécuter uniquement si les tests unitaires passent
    steps:
      - name: 🛎️ Checkout du code
        uses: actions/checkout@v3

      - name: 🔑 Connexion à Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 🔨 Construire l'image Docker
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/gestion_trajet:latest .

      - name: 🚀 Pousser l'image sur Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/gestion_trajet:latest

  test-after-build:
    runs-on: ubuntu-latest
    needs: build-and-push  # 🚨 Exécuter les tests d'intégration après la construction de l’image
    steps:
      - name: 🛎️ Checkout du code
        uses: actions/checkout@v3

      - name: 🔑 Connexion à Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 🧪 Lancer les tests d'intégration depuis le conteneur Docker
        run: |
          docker run --rm ${{ secrets.DOCKER_USERNAME }}/gestion_trajet:latest npm run test:integration

  deploy:
    runs-on: ubuntu-latest
    needs: test-after-build  # 🚨 Déploiement seulement si tous les tests réussissent
    steps:
      - name: 🛎️ Checkout du code
        uses: actions/checkout@v3

      - name: 🔑 Connexion à Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 🚢 Déployer le conteneur Docker
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/gestion_trajet:latest
          docker run -d --name mon-container -p 80:80 ${{ secrets.DOCKER_USERNAME }}/gestion_trajet:latest
