name: CI/CD - Pipeline DevOps complet

on:
  push:
    branches: [main]

env:
  # Configuration Kubernetes
  K3S_VERSION: v1.26.5+k3s1
  NAMESPACE: microservice-1
  DOCKER_REGISTRY: docker.io
  
  # Configuration Application
  APP_NAME: gestion-trajet
  DEPLOYMENT_NAME: gestion-trajet-app
  SERVICE_NAME: gestion-trajet-service
  CONTAINER_PORT: 8080
  SERVICE_PORT: 80
  DB_SERVICE_NAME: db-host
  
  # Configuration Monitoring
  PROMETHEUS_PORT: 9090
  GRAFANA_PORT: 3000
  GRAFANA_ADMIN_PASSWORD: rabaa123
  
  # Configuration SonarQube
  SONAR_HOST_URL: http://localhost:9000
  
  # Configuration Email
  YOUR_EMAIL: elmbarkirabea@gmail.com
  EMAIL_FROM: "GitHub Actions <actions@github.com>"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: üõéÔ∏è Checkout du code
        uses: actions/checkout@v3

      - name: üîë Connexion √† Docker Hub 
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: üî® Construire l'image Docker
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/gestion_trajet:latest .
          
      - name: üöÄ Pousser l'image sur Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/gestion_trajet:latest

  setup-and-test:
    name: "1. Installation et Tests"
    runs-on: ubuntu-latest
    steps:
      - name: "üõéÔ∏è Checkout du code"
        uses: actions/checkout@v4.1.1

      - name: "‚éî Configurer Node.js"
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'

      - name: "üì¶ Installer les d√©pendances"
        run: npm ci

      - name: "üß™ Tests Unitaires"
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: "üîó Tests d'Int√©gration"
        run: npm run test:integration
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: testuser
          DB_PASSWORD: testpass
          NODE_ENV: test

      - name: "üõ†Ô∏è Build de l'application"
        run: npm run build

  sonarqube-analysis:
    name: "2. Analyse SonarQube"
    needs: setup-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: "üõéÔ∏è Checkout du code"
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: "üê≥ D√©marrer SonarQube"
        run: |
          docker run -d \
            --name sonarqube \
            -p 9000:9000 \
            -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
            sonarqube:9.9.1-community
          timeout 300 bash -c 'while ! curl -sSf ${{ env.SONAR_HOST_URL }}/api/system/status | grep -q "\"status\":\"UP\""; do
            sleep 10
            echo "En attente du d√©marrage..."
          done'

      - name: "üîë G√©n√©rer token SonarQube"
        run: |
          SONAR_TOKEN=$(curl -sS -u admin:admin \
            -X POST "${{ env.SONAR_HOST_URL }}/api/user_tokens/generate" \
            -d "name=github-action-$(date +%s)" \
            | jq -r '.token')
          echo "SONAR_TOKEN=$SONAR_TOKEN" >> $GITHUB_ENV
          echo "::add-mask::$SONAR_TOKEN"

      - name: "üîç Ex√©cuter analyse SonarQube"
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=gestion-trajet-app
            -Dsonar.sources=src
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: "üßπ Nettoyer SonarQube"
        if: always()
        run: docker rm -f sonarqube || true

  kubernetes-deploy:
    name: "3. D√©ploiement Kubernetes"
    needs: sonarqube-analysis
    runs-on: ubuntu-latest
    steps:
      - name: "üõéÔ∏è Checkout du code"
        uses: actions/checkout@v4.1.1

      - name: "üîê Login Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: "üñ•Ô∏è Installer K3s"
        run: |
          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=${{ env.K3S_VERSION }} sh -
          sudo chmod 644 /etc/rancher/k3s/k3s.yaml
          sudo k3s kubectl get nodes

      - name: "‚öôÔ∏è Configurer kubectl"
        run: |
          mkdir -p $HOME/.kube
          sudo cp /etc/rancher/k3s/k3s.yaml $HOME/.kube/config
          sudo chown $(id -u):$(id -g) $HOME/.kube/config
          kubectl cluster-info

      - name: "üßπ Nettoyer avant d√©ploiement"
        run: |
          kubectl delete -f k8s/app/ --ignore-not-found=true -n ${{ env.NAMESPACE }} || true
          kubectl delete pvc postgres-pvc -n ${{ env.NAMESPACE }} --ignore-not-found=true || true

      - name: "üöÄ Cr√©er le namespace"
        run: |
          kubectl create ns ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: "üóÑÔ∏è D√©ployer PostgreSQL"
        run: |
          # Appliquer les ressources PostgreSQL
          kubectl apply -f k8s/app/db/postgres-pvc.yaml -n ${{ env.NAMESPACE }}
          kubectl apply -f k8s/app/db/postgres-deployment.yaml -n ${{ env.NAMESPACE }}
          kubectl apply -f k8s/app/db/postgres-service.yaml -n ${{ env.NAMESPACE }}
          
          # Attendre que le PVC soit li√©
          kubectl wait --for=status=Bound pvc/postgres-pvc -n ${{ env.NAMESPACE }} --timeout=120s
          
          # Attendre que PostgreSQL soit pr√™t
          kubectl rollout status deployment/postgres -n ${{ env.NAMESPACE }} --timeout=300s

      - name: "üîç V√©rifier PostgreSQL"
        run: |
          echo "=== √âtat de PostgreSQL ==="
          kubectl get pods,svc,pvc -n ${{ env.NAMESPACE }} -o wide
          
          echo "=== V√©rification de la connexion ==="
          kubectl exec -n ${{ env.NAMESPACE }} $(kubectl get pods -n ${{ env.NAMESPACE }} -l app=postgres -o jsonpath='{.items[0].metadata.name}') -- \
            pg_isready -U ${{ secrets.DB_USER }} -h localhost -d ${{ secrets.DB_NAME }} --timeout=60 || {
              echo "‚ùå √âchec de connexion √† PostgreSQL"
              kubectl logs -n ${{ env.NAMESPACE }} $(kubectl get pods -n ${{ env.NAMESPACE }} -l app=postgres -o jsonpath='{.items[0].metadata.name}')
              exit 1
            }

      - name: "üöÄ D√©ployer l'application"
        run: |
          kubectl apply -f k8s/app/deployment.yaml -n ${{ env.NAMESPACE }}
          kubectl apply -f k8s/app/service.yaml -n ${{ env.NAMESPACE }}
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.NAMESPACE }} --timeout=300s

      - name: "üîç V√©rifier le d√©ploiement"
        run: |
          echo "=== √âtat final des ressources ==="
          kubectl get all -n ${{ env.NAMESPACE }} -o wide
          
          echo "=== V√©rification de l'application ==="
          kubectl port-forward svc/${{ env.SERVICE_NAME }} 8080:${{ env.CONTAINER_PORT }} -n ${{ env.NAMESPACE }} >/dev/null 2>&1 &
          sleep 15
          if curl -sSf http://localhost:8080/health; then
            echo "‚úÖ Application accessible"
          else
            echo "‚ùå √âchec de connexion √† l'application"
            kubectl logs -n ${{ env.NAMESPACE }} -l app=${{ env.APP_NAME }} --tail=100
            exit 1
          fi

      - name: "üìú Afficher les logs en cas d'√©chec"
        if: failure()
        run: |
          echo "=== Logs PostgreSQL ==="
          kubectl logs -n ${{ env.NAMESPACE }} -l app=postgres --tail=100 || true
          
          echo "=== Logs Application ==="
          kubectl logs -n ${{ env.NAMESPACE }} -l app=${{ env.APP_NAME }} --tail=100 || true
          
          echo "=== √âv√©nements du namespace ==="
          kubectl get events -n ${{ env.NAMESPACE }} --sort-by='.lastTimestamp' || true

      - name: "üìß Notification d'√©chec"
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          from: ${{ env.EMAIL_FROM }}
          to: ${{ env.YOUR_EMAIL }}
          subject: "√âchec de d√©ploiement - ${{ env.APP_NAME }}"
          body: |
            Le d√©ploiement a √©chou√©.
            Commit: ${{ github.sha }}
            Logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  monitoring-deploy:
    name: "4. D√©ploiement Monitoring"
    needs: kubernetes-deploy
    runs-on: ubuntu-latest
    env:
      PROMETHEUS_PORT: 9090
      GRAFANA_PORT: 3000
      NODEJS_PORT: 8081
    steps:
      - name: "üõéÔ∏è Checkout du code"
        uses: actions/checkout@v4

      - name: "üê≥ Installer Docker Compose"
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: "üöÄ D√©marrer le monitoring"
        working-directory: ./monitoring
        run: |
          docker-compose up -d --build
          sleep 30
          
          # Configuration Grafana
          curl -X POST "http://localhost:3000/api/datasources" \
            -H "Content-Type: application/json" \
            -u "admin:${{ env.GRAFANA_ADMIN_PASSWORD }}" \
            -d '{"name":"Prometheus","type":"prometheus","url":"http://prometheus:9090","access":"proxy"}'