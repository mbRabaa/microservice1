name: CI/CD - Pipeline DevOps avec Terraform

on:
  push:
    branches:
      - main

env:
  # Configuration de base
  SONAR_HOST_URL: http://localhost:9000
  K3S_VERSION: v1.26.5+k3s1
  TERRAFORM_VERSION: 1.5.5
  NAMESPACE: microservice
  DOCKER_REGISTRY: docker.io
  NODE_VERSION: 20
  
  # Configuration Monitoring
  PROMETHEUS_PORT: 9090
  GRAFANA_PORT: 3000
  GRAFANA_ADMIN_PASSWORD: rabaa123
  
  # Configuration Email
  YOUR_EMAIL: elmbarkirabea@gmail.com
  EMAIL_FROM: "GitHub Actions <actions@github.com>"

jobs:
  setup-and-test:
    name: "1. Installation et Tests"
    runs-on: ubuntu-latest
    
    steps:
      - name: "🛎️ Checkout du code"
        uses: actions/checkout@v4.1.1

      - name: "⎔ Configurer Node.js"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "📦 Installer les dépendances"
        run: npm ci

      - name: "🧪 Tests Unitaires"
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: "🔗 Tests d'Intégration"
        run: npm run test:integration
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: testuser
          DB_PASSWORD: testpass
          NODE_ENV: test

      - name: "🛠️ Build de l'application"
        run: npm run build

  sonarqube-analysis:
    name: "2. Analyse SonarQube"
    needs: setup-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: "🛎️ Checkout du code"
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: "🐳 Démarrer SonarQube"
        run: |
          docker run -d \
            --name sonarqube \
            -p 9000:9000 \
            -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
            sonarqube:9.9.1-community
          timeout 300 bash -c 'while ! curl -sSf ${{ env.SONAR_HOST_URL }}/api/system/status | grep -q "\"status\":\"UP\""; do
            sleep 10
            echo "En attente du démarrage..."
          done'

      - name: "🔑 Générer token SonarQube"
        run: |
          SONAR_TOKEN=$(curl -sS -u admin:admin \
            -X POST "${{ env.SONAR_HOST_URL }}/api/user_tokens/generate" \
            -d "name=github-action-$(date +%s)" \
            | jq -r '.token')
          echo "SONAR_TOKEN=$SONAR_TOKEN" >> $GITHUB_ENV
          echo "::add-mask::$SONAR_TOKEN"

      - name: "🔍 Exécuter analyse SonarQube"
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=gestion-trajet-app
            -Dsonar.sources=src
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: "🧹 Nettoyer SonarQube"
        if: always()
        run: docker rm -f sonarqube || true

  docker-deploy:
    name: "3. Déploiement Docker et Kubernetes"
    needs: sonarqube-analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: "🛎️ Checkout du code"
        uses: actions/checkout@v4.1.1

      - name: "🔐 Login Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: "🏗️ Build Docker"
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/gestion-trajet:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/gestion-trajet:latest

      - name: "🖥️ Installer K3s"
        run: |
          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=${{ env.K3S_VERSION }} sh -
          sudo chmod 644 /etc/rancher/k3s/k3s.yaml

      - name: "⚙️ Configurer kubectl"
        run: |
          mkdir -p $HOME/.kube
          sudo cp /etc/rancher/k3s/k3s.yaml $HOME/.kube/config
          sudo chown $(id -u):$(id -g) $HOME/.kube/config

      - name: "⚙️ Installer Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: "🚀 Déployer avec Terraform"
        working-directory: ./infra
        env:
          TF_VAR_docker_username: ${{ secrets.DOCKER_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_image_tag: ${{ github.sha }}
        run: |
          terraform init
          terraform validate
          terraform apply -auto-approve

      - name: "🔍 Vérifier le déploiement"
        run: |
          kubectl get pods,svc,deploy -n ${{ env.NAMESPACE }}
          echo "Service URL: $(terraform -chdir=infra output -raw service_url)"

  monitoring-deploy:
    name: "4. Déploiement et Vérification Monitoring"
    needs: docker-deploy
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: "🛎️ Checkout du code"
        uses: actions/checkout@v4.1.1

      - name: "📦 Installer Docker Compose"
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: "📦 Déployer la stack monitoring"
        working-directory: ./monitoring
        run: |
          # Démarrer les services avec des noms fixes
          docker-compose up -d
          
          # Attendre le démarrage complet
          echo "Attente du démarrage des services (45s)..."
          sleep 45
          
          # Vérifier l'état des conteneurs
          echo "État des conteneurs:"
          docker-compose ps -a
          
          # Vérification robuste de Prometheus
          if ! docker logs monitoring_prometheus --tail=50 2>&1 | grep -q "Server is ready to receive web requests"; then
            echo "❌ Prometheus ne s'est pas démarré correctement"
            echo "Logs Prometheus:"
            docker logs monitoring_prometheus
            exit 1
          fi

      - name: "📊 Vérifier Prometheus"
        run: |
          echo "Vérification de l'API Prometheus..."
          if ! curl -s http://localhost:9090/-/ready | grep -q "Prometheus is Ready"; then
            echo "❌ API Prometheus inaccessible"
            docker logs monitoring_prometheus --tail=50
            exit 1
          fi
          
          echo "Prometheus est opérationnel"
          echo "Targets:"
          curl -s http://localhost:9090/api/v1/targets | jq .

      - name: "📈 Configurer Grafana"
        run: |
          echo "Vérification de Grafana..."
          timeout 120 bash -c 'until curl -s http://localhost:3000/api/health | grep -q "\"database\":\"ok\""; do
            sleep 5
            echo "En attente..."
          done'
          
          echo "Configuration de la source de données..."
          curl -X POST "http://localhost:3000/api/datasources" \
            -H "Content-Type: application/json" \
            -u "admin:${{ env.GRAFANA_ADMIN_PASSWORD }}" \
            -d '{
              "name":"Prometheus",
              "type":"prometheus",
              "url":"http://prometheus:9090",
              "access":"proxy",
              "basicAuth":false
            }' || {
              echo "❌ Échec de configuration Grafana"
              docker logs monitoring_grafana --tail=50
              exit 1
            }

      - name: "📝 Générer rapport"
        run: |
          echo "# Rapport de Monitoring" > monitoring/report.md
          echo "## Logs Prometheus" >> monitoring/report.md
          docker logs monitoring_prometheus --tail=100 >> monitoring/report.md
          echo "## Logs Grafana" >> monitoring/report.md
          docker logs monitoring_grafana --tail=100 >> monitoring/report.md
          echo "## Métriques disponibles" >> monitoring/report.md
          curl -s http://localhost:9090/api/v1/label/__name__/values | jq . >> monitoring/report.md
          echo "## Configuration Grafana" >> monitoring/report.md
          curl -s --user "admin:${{ env.GRAFANA_ADMIN_PASSWORD }}" http://localhost:3000/api/datasources | jq . >> monitoring/report.md

  notify:
    name: "5. Notifications Finales"
    needs: [docker-deploy, monitoring-deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: "🌐 Récupérer l'URL de production"
        id: prod-url
        run: |
          cd infra
          echo "PROD_URL=$(terraform output -raw service_url)" >> $GITHUB_OUTPUT
          cd ..

      - name: "📧 Préparer le rapport final"
        run: |
          echo "# Rapport de déploiement" > final-report.md
          echo "- Statut: ${{ job.status }}" >> final-report.md
          echo "- Commit: ${{ github.sha }}" >> final-report.md
          echo "- Date: $(date)" >> final-report.md
          echo "- URL: ${{ steps.prod-url.outputs.PROD_URL }}" >> final-report.md
          echo "## Détails Monitoring" >> final-report.md
          cat monitoring/report.md >> final-report.md

      - name: "📧 Envoyer notification"
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          from: ${{ env.EMAIL_FROM }}
          to: ${{ env.YOUR_EMAIL }}
          subject: "Rapport de déploiement - ${{ github.repository }}"
          body: file://final-report.md
          attachments: monitoring/report.md