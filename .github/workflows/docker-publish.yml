name: CI/CD - Pipeline DevOps avec Kubernetes

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  K3S_VERSION: v1.26.5+k3s1
  NAMESPACE: microservice
  DOCKER_REGISTRY: docker.io
  APP_NAME: gestion-trajet
  SERVICE_PORT: 80
  CONTAINER_PORT: 8080

jobs:
  validate-k8s:
    name: "1. Validation Kubernetes"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate YAML syntax
        run: |
          sudo apt-get install -y yamllint
          yamllint k8s/*.yaml || true

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.26.5'

      - name: Dry-run Kubernetes manifests
        run: |
          kubectl apply -f k8s/ --dry-run=server -n ${{ env.NAMESPACE }}

      - name: Check for sensitive data
        run: |
          if grep -q -E 'password|secret|token' k8s/secret.yaml; then
            echo "::error::Potential sensitive data found in secret.yaml"
            exit 1
          fi

  build-and-push:
    name: "2. Build et Push Docker"
    needs: validate-k8s
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-k8s:
    name: "3. Déploiement Kubernetes"
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install K3s
        run: |
          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=${{ env.K3S_VERSION }} sh -
          sudo chmod 644 /etc/rancher/k3s/k3s.yaml

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          sudo cp /etc/rancher/k3s/k3s.yaml $HOME/.kube/config
          sudo chown $(id -u):$(id -g) $HOME/.kube/config
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

      - name: Deploy to Kubernetes
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} || true
          
          kubectl apply -f k8s/configmap.yaml -n ${{ env.NAMESPACE }}
          kubectl apply -f k8s/secret.yaml -n ${{ env.NAMESPACE }}
          kubectl apply -f k8s/deployment.yaml -n ${{ env.NAMESPACE }}
          kubectl apply -f k8s/service.yaml -n ${{ env.NAMESPACE }}

          kubectl rollout status deployment/${{ env.APP_NAME }} -n ${{ env.NAMESPACE }} --timeout=300s

      - name: Verify deployment
        run: |
          kubectl get all -n ${{ env.NAMESPACE }}
          kubectl describe deployment/${{ env.APP_NAME }} -n ${{ env.NAMESPACE }}
          
          kubectl port-forward svc/${{ env.APP_NAME }}-service ${{ env.SERVICE_PORT }}:${{ env.CONTAINER_PORT }} -n ${{ env.NAMESPACE }} &
          sleep 5
          curl -v http://localhost:${{ env.SERVICE_PORT }}/healthz

  integration-tests:
    name: "4. Tests d'Intégration"
    needs: deploy-k8s
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run integration tests
        run: |
          SERVICE_IP=$(kubectl get svc ${{ env.APP_NAME }}-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          curl -sSf "http://$SERVICE_IP:${{ env.SERVICE_PORT }}/api/health" | jq -e '.status == "OK"'
          curl -sSf "http://$SERVICE_IP:${{ env.SERVICE_PORT }}/api/ready" | jq -e '.ready == true'

  cleanup:
    name: "5. Nettoyage"
    if: always()
    needs: integration-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cleanup Kubernetes resources
        run: |
          kubectl delete -f k8s/ -n ${{ env.NAMESPACE }} --ignore-not-found || true
          sudo /usr/local/bin/k3s-uninstall.sh || true