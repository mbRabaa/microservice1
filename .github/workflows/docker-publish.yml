name: CI/CD - Pipeline DevOps avec Terraform

on:
  push:
    branches:
      - main

env:
  SONAR_HOST_URL: http://localhost:9000
  K3S_VERSION: v1.26.5+k3s1
  TERRAFORM_VERSION: 1.5.5
  NAMESPACE: microservice
  DOCKER_REGISTRY: docker.io
  NODE_VERSION: 20
  # Monitoring - URLs modifiées pour Kubernetes
  PROMETHEUS_URL: http://prometheus-server.monitoring.svc.cluster.local:9090
  GRAFANA_URL: http://grafana-service.monitoring.svc.cluster.local:3000
  GRAFANA_DASHBOARD_UID: gestion-trajet-dashboard
  # Email
  YOUR_EMAIL: elmbarkirabea@gmail.com
  EMAIL_FROM: "GitHub Actions <actions@github.com>"

jobs:
  setup-and-test:
    name: "1. Installation et Tests"
    runs-on: ubuntu-latest
    
    steps:
      - name: "🛎️ Checkout du code"
        uses: actions/checkout@v4.1.1

      - name: "⎔ Configurer Node.js"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "📦 Installer les dépendances"
        run: npm ci

      - name: "🧪 Tests Unitaires"
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: "🔗 Tests d'Intégration"
        run: npm run test:integration
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: testuser
          DB_PASSWORD: testpass
          NODE_ENV: test

      - name: "🛠️ Build de l'application"
        run: npm run build

  sonarqube-analysis:
    name: "2. Analyse SonarQube"
    needs: setup-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: "🛎️ Checkout du code"
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: "🐳 Démarrer SonarQube"
        run: |
          docker run -d \
            --name sonarqube \
            -p 9000:9000 \
            -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
            sonarqube:9.9.1-community
          timeout 300 bash -c 'while ! curl -sSf ${{ env.SONAR_HOST_URL }}/api/system/status | grep -q "\"status\":\"UP\""; do
            sleep 10
            echo "En attente du démarrage..."
          done'

      - name: "🔑 Générer token SonarQube"
        run: |
          SONAR_TOKEN=$(curl -sS -u admin:admin \
            -X POST "${{ env.SONAR_HOST_URL }}/api/user_tokens/generate" \
            -d "name=github-action-$(date +%s)" \
            | jq -r '.token')
          echo "SONAR_TOKEN=$SONAR_TOKEN" >> $GITHUB_ENV
          echo "::add-mask::$SONAR_TOKEN"

      - name: "🔍 Exécuter analyse SonarQube"
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=gestion-trajet-app
            -Dsonar.sources=src
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: "🧹 Nettoyer SonarQube"
        if: always()
        run: docker rm -f sonarqube || true

  docker-deploy:
    name: "3. Déploiement Docker et Kubernetes"
    needs: sonarqube-analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: "🛎️ Checkout du code"
        uses: actions/checkout@v4.1.1

      - name: "🔐 Login Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: "🏗️ Build Docker"
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/gestion-trajet:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/gestion-trajet:latest

      - name: "🖥️ Installer K3s"
        run: |
          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=${{ env.K3S_VERSION }} sh -
          sudo chmod 644 /etc/rancher/k3s/k3s.yaml

      - name: "⚙️ Configurer kubectl"
        run: |
          mkdir -p $HOME/.kube
          sudo cp /etc/rancher/k3s/k3s.yaml $HOME/.kube/config
          sudo chown $(id -u):$(id -g) $HOME/.kube/config

      - name: "⚙️ Installer Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: "🚀 Déployer avec Terraform"
        working-directory: ./infra
        env:
          TF_VAR_docker_username: ${{ secrets.DOCKER_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_image_tag: ${{ github.sha }}
        run: |
          terraform init
          terraform validate
          terraform apply -auto-approve

      - name: "🔍 Vérifier le déploiement"
        run: |
          kubectl get pods,svc,deploy -n ${{ env.NAMESPACE }}
          echo "Service URL: $(terraform -chdir=infra output -raw service_url)"

  monitoring-deploy:
    name: "4. Déploiement et Vérification Monitoring"
    needs: docker-deploy
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: "🛎️ Checkout du code"
        uses: actions/checkout@v4.1.1

      - name: "📦 Déployer la stack monitoring"
        working-directory: ./monitoring
        run: |
          # Vérifier si la stack est déjà déployée
          if docker-compose ps | grep -q "Up"; then
            echo "La stack monitoring est déjà en cours d'exécution"
            docker-compose ps
          else
            echo "Démarrage de la stack monitoring..."
            docker-compose up -d
          fi

          # Attendre que les services soient prêts
          echo "⏳ Attente du démarrage des services..."
          timeout 120 bash -c 'until docker-compose ps | grep -q "Up (healthy)"; do
            sleep 5
            echo "En attente..."
          done' || echo "Certains services ne sont pas healthy"

      - name: "🔍 Vérifier l'état des services"
        working-directory: ./monitoring
        run: |
          echo "=== État des conteneurs ==="
          docker-compose ps

          echo "=== Logs des services ==="
          docker-compose logs --tail=50 || true

      - name: "📊 Vérifier Prometheus"
        run: |
          # Vérifier l'accessibilité de Prometheus
          PROMETHEUS_LOCAL="http://localhost:9090"
          echo "Vérification de Prometheus sur $PROMETHEUS_LOCAL"

          # Attendre que Prometheus soit prêt
          timeout 60 bash -c 'until curl -sSf "$PROMETHEUS_LOCAL/-/ready"; do
            sleep 5
            echo "En attente de Prometheus..."
          done'

          # Vérifier les targets
          TARGETS=$(curl -s "$PROMETHEUS_LOCAL/api/v1/targets")
          echo "Targets Prometheus:"
          echo "$TARGETS" | jq .

          # Vérifier que l'exporter NGINX est bien scrapé
          if ! echo "$TARGETS" | jq -e '.data.activeTargets[] | select(.labels.job=="nginx-exporter" and .health=="up")' >/dev/null; then
            echo "::error::Target NGINX exporter non trouvée ou inactive"
            exit 1
          fi

      - name: "📈 Configurer Grafana"
        env:
          GRAFANA_ADMIN_PASSWORD: rabaa123
        run: |
          GRAFANA_LOCAL="http://localhost:3000"
          echo "Configuration de Grafana sur $GRAFANA_LOCAL"

          # Attendre que Grafana soit prêt
          timeout 60 bash -c 'until curl -sSf "$GRAFANA_LOCAL/api/health"; do
            sleep 5
            echo "En attente de Grafana..."
          done'

          # Configurer la source de données Prometheus
          curl -X POST "$GRAFANA_LOCAL/api/datasources" \
            -H "Content-Type: application/json" \
            -u "admin:$GRAFANA_ADMIN_PASSWORD" \
            -d '{
              "name":"Prometheus",
              "type":"prometheus",
              "url":"http://prometheus:9090",
              "access":"proxy",
              "basicAuth":false
            }' || echo "La source de données existe peut-être déjà"

          # Vérifier les dashboards
          DASHBOARDS=$(curl -s "$GRAFANA_LOCAL/api/search" -u "admin:$GRAFANA_ADMIN_PASSWORD")
          echo "Dashboards disponibles:"
          echo "$DASHBOARDS" | jq .

      - name: "📝 Générer rapport de monitoring"
        working-directory: ./monitoring
        run: |
          echo "# Rapport de Monitoring" > report.md
          echo "## Services" >> report.md
          docker-compose ps >> report.md

          echo "## Métriques disponibles" >> report.md
          curl -s "http://localhost:9090/api/v1/label/__name__/values" | jq . >> report.md

          echo "## Dashboards Grafana" >> report.md
          curl -s "http://localhost:3000/api/search" -u "admin:$GRAFANA_ADMIN_PASSWORD" | jq '.[].title' >> report.md

          echo "::notice title=Rapport Monitoring::$(cat report.md)"

  notify:
    name: "5. Notifications Finales"
    needs: [docker-deploy, monitoring-deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: "🌐 Récupérer l'URL de production"
        id: prod-url
        working-directory: ./infra
        run: |
          echo "PROD_URL=$(terraform -chdir=infra output -raw service_url)" >> $GITHUB_OUTPUT

      - name: "📧 Envoyer rapport complet"
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          from: ${{ env.EMAIL_FROM }}
          to: ${{ env.YOUR_EMAIL }}
          subject: "Rapport de déploiement - ${{ github.repository }}"
          body: |
            Statut: ${{ job.status }}

            Détails :
            - Application: ${{ steps.prod-url.outputs.PROD_URL }}
            - Commit: ${{ github.sha }}
            - Date: $(date)
            - Logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Monitoring:
            - Prometheus: http://localhost:9090
            - Grafana: http://localhost:3000
            - Rapport complet en pièce jointe
          attachments: ./monitoring/report.md