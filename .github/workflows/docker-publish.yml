name: CI/CD - Pipeline DevOps complet

on:
  push:
    branches:
      - main

env:
  # Configurations de base
  NODE_VERSION: 20
  DOCKER_REGISTRY: docker.io
  NAMESPACE: microservice
  TERRAFORM_VERSION: 1.5.5
  K3S_VERSION: v1.26.5+k3s1
  
  # Monitoring
  PROMETHEUS_URL: http://prometheus-server.monitoring.svc.cluster.local:9090
  GRAFANA_URL: http://grafana-service.monitoring.svc.cluster.local:3000
  GRAFANA_DASHBOARD_UID: gestion-trajet-dashboard
  
  # SonarQube
  SONAR_HOST_URL: http://localhost:9000
  
  # Email
  YOUR_EMAIL: elmbarkirabea@gmail.com
  EMAIL_FROM: "GitHub Actions <actions@github.com>"

jobs:
  # ============ √âTAPE 1: TESTS ============
  setup-and-test:
    name: "1. Tests et Build"
    runs-on: ubuntu-latest
    
    steps:
      - name: "üõéÔ∏è Checkout du code"
        uses: actions/checkout@v4.1.1

      - name: "‚éî Configurer Node.js"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "üì¶ Installer les d√©pendances"
        run: npm ci

      - name: "üß™ Ex√©cuter les tests unitaires"
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: "üìä G√©n√©rer le rapport de couverture"
        run: |
          mkdir -p coverage
          npm run coverage

      - name: "üîó Tests d'int√©gration"
        run: npm run test:integration
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: testuser
          DB_PASSWORD: testpass
          NODE_ENV: test

      - name: "üõ†Ô∏è Build de l'application"
        run: npm run build

  # ============ √âTAPE 2: ANALYSE QUALIT√â ============
  sonarqube-analysis:
    name: "2. Analyse SonarQube"
    needs: setup-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0  # N√©cessaire pour SonarQube

      - name: "üê≥ D√©marrer SonarQube"
        run: |
          docker run -d \
            --name sonarqube \
            -p 9000:9000 \
            -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
            sonarqube:9.9.1-community
          timeout 300 bash -c 'while ! curl -sSf ${{ env.SONAR_HOST_URL }}/api/system/status | grep -q "\"status\":\"UP\""; do
            sleep 10
            echo "En attente du d√©marrage..."
          done'

      - name: "üîë G√©n√©rer token SonarQube"
        run: |
          SONAR_TOKEN=$(curl -sS -u admin:admin \
            -X POST "${{ env.SONAR_HOST_URL }}/api/user_tokens/generate" \
            -d "name=github-action-$(date +%s)" \
            | jq -r '.token')
          echo "SONAR_TOKEN=$SONAR_TOKEN" >> $GITHUB_ENV
          echo "::add-mask::$SONAR_TOKEN"

      - name: "üîç Ex√©cuter analyse SonarQube"
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=gestion-trajet-app
            -Dsonar.sources=src
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.tests=test
            -Dsonar.test.inclusions=test/**/*.test.js

      - name: "üßπ Nettoyer SonarQube"
        if: always()
        run: docker rm -f sonarqube || true

  # ============ √âTAPE 3: D√âPLOIEMENT ============
  docker-deploy:
    name: "3. D√©ploiement Docker/K8s"
    needs: sonarqube-analysis
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4.1.1

      - name: "üîê Login Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: "üèóÔ∏è Build et Push Docker"
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/gestion-trajet:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/gestion-trajet:latest

      - name: "üñ•Ô∏è Installer K3s"
        run: |
          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=${{ env.K3S_VERSION }} sh -
          sudo chmod 644 /etc/rancher/k3s/k3s.yaml
          mkdir -p $HOME/.kube
          sudo cp /etc/rancher/k3s/k3s.yaml $HOME/.kube/config
          sudo chown $(id -u):$(id -g) $HOME/.kube/config
          export KUBECONFIG=$HOME/.kube/config
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

      - name: "‚öôÔ∏è Installer Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: "üöÄ D√©ployer l'infrastructure"
        working-directory: ./infra
        env:
          TF_VAR_docker_username: ${{ secrets.DOCKER_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_image_tag: ${{ github.sha }}
        run: |
          terraform init
          terraform validate
          terraform apply -auto-approve

  # ============ √âTAPE 4: MONITORING ============ 
  monitoring-check:
    name: "4. Configuration Monitoring"
    needs: docker-deploy
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: "üõ†Ô∏è Installer Helm"
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm version

      - name: "üì¶ Installer Prometheus et Grafana"
        run: |
          kubectl create namespace monitoring || true
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update
          
          helm upgrade --install prometheus prometheus-community/prometheus \
            --namespace monitoring \
            --set server.service.type=ClusterIP \
            --set server.persistentVolume.enabled=false
            
          helm upgrade --install grafana grafana/grafana \
            --namespace monitoring \
            --set service.type=ClusterIP \
            --set adminPassword=admin

      - name: "‚öôÔ∏è Configurer Prometheus"
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: monitoring.coreos.com/v1
          kind: ServiceMonitor
          metadata:
            name: gestion-trajet-monitor
            namespace: monitoring
          spec:
            selector:
              matchLabels:
                app: gestion-trajet
            endpoints:
            - port: http
              path: /metrics
          EOF
          kubectl rollout restart deployment prometheus-server -n monitoring

      - name: "üìä Configurer Grafana"
        env:
          GRAFANA_ADMIN_PASSWORD: admin
        run: |
          kubectl wait --for=condition=ready pod -n monitoring -l app.kubernetes.io/name=grafana --timeout=120s
          kubectl port-forward svc/grafana 3000:3000 -n monitoring --address=0.0.0.0 &
          sleep 10
          
          # Cr√©ation du dashboard (exemple simplifi√©)
          DASHBOARD=$(cat <<EOF
          {
            "dashboard": {
              "title": "Microservice Dashboard",
              "panels": [],
              "uid": "${{ env.GRAFANA_DASHBOARD_UID }}"
            }
          }
          EOF
          )
          
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "$DASHBOARD" \
            http://admin:$GRAFANA_ADMIN_PASSWORD@localhost:3000/api/dashboards/db

  # ============ √âTAPE 5: NOTIFICATIONS ============
  notify:
    name: "5. Notifications"
    needs: [docker-deploy, monitoring-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: "üåê R√©cup√©rer l'URL du service"
        id: get-url
        working-directory: ./infra
        run: |
          echo "SERVICE_URL=$(terraform output -raw service_url)" >> $GITHUB_OUTPUT

      - name: "üìß Envoyer rapport"
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          from: ${{ env.EMAIL_FROM }}
          to: ${{ env.YOUR_EMAIL }}
          subject: "D√©ploiement termin√© - ${{ github.sha }}"
          body: |
            Statut: ${{ job.status }}
            Service: ${{ steps.get-url.outputs.SERVICE_URL }}
            Grafana: ${{ env.GRAFANA_URL }}/d/${{ env.GRAFANA_DASHBOARD_UID }}