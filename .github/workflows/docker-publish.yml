name: CI/CD - Pipeline DevOps & K3s Deployment

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    services:
      sonarqube:
        image: sonarqube:lts-community
        ports:
          - 9000:9000
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONAR_WEB_JAVAOPTS: "-Xmx512m -Xms128m"
        options: >-
          --health-cmd "curl -f http://localhost:9000/api/server/version || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 60
          --memory 2g
          --cpus 2
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Afficher les logs si le service √©choue
      - name: üìú Afficher les logs SonarQube (si √©chec)
        if: failure()
        run: |
          echo "=== Logs du conteneur SonarQube ==="
          docker ps -a
          docker logs $(docker ps -aq --filter ancestor=sonarqube:lts-community) || true
          echo "==================================="

      # √âtape 1 : Installer les d√©pendances
      - name: üì¶ Installer les d√©pendances
        run: npm install

      # √âtape 2 : Lancer les tests unitaires
      - name: üéØ Lancer les tests unitaires
        run: npm test

      # √âtape 3 : Attendre que SonarQube soit pr√™t
      - name: ‚è≥ Attendre que SonarQube soit pr√™t (10 min max)
        timeout-minutes: 10
        run: |
          echo "V√©rification du d√©marrage de SonarQube..."
          for i in {1..60}; do
            if curl -sSf http://localhost:9000 >/dev/null; then
              echo "SonarQube est pr√™t apr√®s $((i*10)) secondes"
              exit 0
            fi
            echo "Attente ($((i*10))s)..."
            sleep 10
          done
          echo "Erreur: SonarQube n'a pas d√©marr√© apr√®s 10 minutes"
          exit 1

      # √âtape 4 : Analyse SonarQube
      - name: üîç Analyser la qualit√© du code
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://localhost:9000

      # √âtape 5 : Quality Gate
      - name: üö¶ V√©rifier la Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # [Reste de votre configuration existante...]