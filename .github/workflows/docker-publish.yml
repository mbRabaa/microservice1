name: CI/CD Pipeline DevOps Compl√®te

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  # Versions
  NODE_VERSION: 20
  K3S_VERSION: v1.26.5+k3s1
  TERRAFORM_VERSION: 1.5.5
  
  # Environnements
  NAMESPACE: microservice
  DOCKER_REGISTRY: docker.io
  
  # Monitoring
  PROMETHEUS_URL: http://prometheus:9090
  GRAFANA_URL: http://grafana:3000
  
  # Email
  YOUR_EMAIL: elmbarkirabea@gmail.com  # ‚Üê Remplacez par votre email
  EMAIL_FROM: "GitHub Actions <actions@github.com>"

jobs:
  setup-and-test:
    name: "1. Installation et Tests"
    runs-on: ubuntu-latest
    
    steps:
      - name: "üõéÔ∏è Checkout du code"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "‚éî Configurer Node.js"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "üì¶ Installer les d√©pendances"
        run: npm ci

      - name: "üß™ Tests Unitaires avec couverture"
        run: npm run test:unit -- --coverage
        env:
          NODE_ENV: test

      - name: "üîó Tests d'Int√©gration"
        run: npm run test:integration
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: testuser
          DB_PASSWORD: testpass
          NODE_ENV: test

      - name: "üõ†Ô∏è Build de l'application"
        run: npm run build

  quality-analysis:
    name: "2. Analyse Qualit√© SonarQube"
    needs: setup-and-test
    runs-on: ubuntu-latest
    
    steps:
      - name: "üõéÔ∏è Checkout du code"
        uses: actions/checkout@v3

      - name: "üîç Ex√©cuter SonarQube"
        uses: SonarSource/sonarqube-scan-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=gestion-trajet-app
            -Dsonar.sources=src
            -Dsonar.tests=test
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.test.inclusions=**/*.test.js
            -Dsonar.qualitygate.wait=true

      - name: "üìß Notifier r√©sultat analyse"
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          from: ${{ env.EMAIL_FROM }}
          to: ${{ env.YOUR_EMAIL }}
          subject: "Analyse SonarQube - ${{ github.repository }}"
          body: |
            L'analyse SonarQube est termin√©e.
            Statut: ${{ job.status }}
            Rapport: ${{ secrets.SONAR_HOST_URL }}/dashboard?id=gestion-trajet-app

  deploy-staging:
    name: "3. D√©ploiement Staging"
    needs: quality-analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: "üõéÔ∏è Checkout du code"
        uses: actions/checkout@v3

      - name: "üîê Login Docker Hub"
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: "üèóÔ∏è Build et Push Docker"
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/gestion-trajet:staging-${{ github.sha }}

      - name: "üöÄ D√©ployer sur Staging"
        working-directory: ./infra
        run: |
          terraform init -backend-config="env/staging.backend.tfvars"
          terraform validate
          terraform apply -auto-approve -var-file="env/staging.tfvars"

  e2e-tests:
    name: "4. Tests End-to-End"
    needs: deploy-staging
    runs-on: ubuntu-latest
    
    steps:
      - name: "üõéÔ∏è Checkout du code"
        uses: actions/checkout@v3

      - name: "üåê R√©cup√©rer l'URL du staging"
        id: staging-url
        working-directory: ./infra
        run: |
          echo "STAGING_URL=$(terraform output -raw service_url)" >> $GITHUB_OUTPUT

      - name: "üß™ Ex√©cuter tests E2E"
        run: npm run test:e2e
        env:
          APP_URL: ${{ steps.staging-url.outputs.STAGING_URL }}

  deploy-prod:
    name: "5. D√©ploiement Production"
    needs: e2e-tests
    if: success()
    runs-on: ubuntu-latest
    
    steps:
      - name: "üèóÔ∏è Build et Push Docker"
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/gestion-trajet:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/gestion-trajet:latest

      - name: "üöÄ D√©ployer en Production"
        working-directory: ./infra
        run: |
          terraform init -backend-config="env/prod.backend.tfvars"
          terraform validate
          terraform apply -auto-approve -var-file="env/prod.tfvars"

  monitoring-check:
    name: "6. V√©rification Monitoring"
    needs: deploy-prod
    runs-on: ubuntu-latest
    
    steps:
      - name: "üìä V√©rifier Prometheus"
        run: |
          # V√©rifier que le service est up
          curl -s "${{ env.PROMETHEUS_URL }}/api/v1/targets" | \
            jq -e '.data.activeTargets[] | select(.labels.job=="gestion-trajet" and .health=="up")'
          
          # V√©rifier des m√©triques sp√©cifiques
          curl -s "${{ env.PROMETHEUS_URL }}/api/v1/query?query=up{job='gestion-trajet'}" | \
            jq -e '.data.result[0].value[1] == "1"'

      - name: "üìà V√©rifier Grafana"
        run: |
          # V√©rifier que le dashboard existe
          curl -s -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            "${{ env.GRAFANA_URL }}/api/dashboards/uid/gestion-trajet-dashboard" | \
            jq -e '.dashboard'
          
          # V√©rifier la sant√© de Grafana
          curl -s "${{ env.GRAFANA_URL }}/api/health" | \
            jq -e '.database == "ok"'

  notify:
    name: "üìß Notifications Finales"
    needs: [deploy-prod, monitoring-check]
    runs-on: ubuntu-latest
    
    steps:
      - name: "üåê R√©cup√©rer l'URL de production"
        id: prod-url
        working-directory: ./infra
        run: |
          echo "PROD_URL=$(terraform output -raw service_url)" >> $GITHUB_OUTPUT

      - name: "üìß Envoyer rapport complet"
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          from: ${{ env.EMAIL_FROM }}
          to: ${{ env.YOUR_EMAIL }}
          subject: "Rapport de d√©ploiement - ${{ github.repository }}"
          body: |
            D√©ploiement termin√© avec statut: ${{ job.status }}

            D√©tails :
            - Application: ${{ steps.prod-url.outputs.PROD_URL }}
            - Commit: ${{ github.sha }}
            - Date: $(date)
            - Logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Dashboard Grafana: ${{ env.GRAFANA_URL }}/d/gestion-trajet-dashboard