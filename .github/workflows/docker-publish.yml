name: CI/CD - Docker Build, Deploy & Kubernetes

on:
  push:
    branches:
      - main

jobs:
  # Étape 1 : Test du code
  test-before-build:
    runs-on: ubuntu-latest
    steps:
      - name: 🛎️ Checkout du code
        uses: actions/checkout@v3

      - name: 📦 Installer les dépendances
        run: npm install

      - name: 🎯 Lancer les tests unitaires
        run: npm test

      - name: 🔍 Linting du code
        run: npm run lint

  # Étape 2 : Construire et pousser l'image Docker
  build-and-push:
    runs-on: ubuntu-latest
    needs: test-before-build  # Exécuter uniquement si les tests unitaires passent
    steps:
      - name: 🛎️ Checkout du code
        uses: actions/checkout@v3

      - name: 🔑 Connexion à Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 🔨 Construire l'image Docker
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/gestion_trajet:latest .

      - name: 🚀 Pousser l'image sur Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/gestion_trajet:latest

  # Étape 3 : Déployer sur Kubernetes
  deploy-to-k8s:
    runs-on: ubuntu-latest
    needs: build-and-push  # Exécuter après la construction et le push de l'image
    steps:
      - name: 🛎️ Checkout du code
        uses: actions/checkout@v3

      - name: 🔑 Se connecter à Kubernetes
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kube_config.yaml  # Charger le fichier kubeconfig à partir des secrets
          export KUBECONFIG=kube_config.yaml

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yaml  # Déployer le backend sur Kubernetes
          kubectl apply -f k8s/service.yaml  # Déployer les services Kubernetes

  # Étape 4 : Vérification de la santé des pods Kubernetes
  verify-k8s-health:
    runs-on: ubuntu-latest
    needs: deploy-to-k8s  # Exécuter après le déploiement Kubernetes
    steps:
      - name: 🛎️ Checkout du code
        uses: actions/checkout@v3

      - name: 🔑 Se connecter à Kubernetes
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kube_config.yaml  # Charger le fichier kubeconfig à partir des secrets
          export KUBECONFIG=kube_config.yaml

      - name: Vérifier la santé des services et des pods
        run: |
          kubectl get pods  # Vérifier si tous les pods sont bien en cours d'exécution
          kubectl describe pod <pod-name>  # Décrire un pod particulier pour voir sa santé

  # Étape 5 : Déploiement en production (optionnel)
  deploy-production:
    runs-on: ubuntu-latest
    needs: verify-k8s-health  # Exécuter après avoir vérifié la santé des pods
    steps:
      - name: 🛎️ Checkout du code
        uses: actions/checkout@v3

      - name: 🔑 Se connecter à Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 🚢 Déployer le conteneur Docker en production
        run: |
          kubectl apply -f k8s/production-deployment.yaml  # Déployer en production sur Kubernetes
