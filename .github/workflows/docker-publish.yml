name: CI/CD Pipeline DevOps Complète

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  # Versions
  NODE_VERSION: 20
  K3S_VERSION: v1.26.5+k3s1
  TERRAFORM_VERSION: 1.5.5
  
  # Environnements
  NAMESPACE: microservice
  DOCKER_REGISTRY: docker.io
  
  # Monitoring
  PROMETHEUS_URL: http://prometheus:9090
  GRAFANA_URL: http://grafana:3000
  GRAFANA_DASHBOARD_UID: gestion-trajet-dashboard
  
  # Email
  YOUR_EMAIL: elmbarkirabea@gmail.com
  EMAIL_FROM: "GitHub Actions <actions@github.com>"

jobs:
  setup-and-test:
    name: "1. Installation et Tests"
    runs-on: ubuntu-latest
    
    steps:
      - name: "🛎️ Checkout du code"
        uses: actions/checkout@v4

      - name: "⎔ Configurer Node.js"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "📦 Installer les dépendances"
        run: npm ci

      - name: "🧪 Tests Unitaires avec couverture"
        run: npm run test:unit 
        env:
          NODE_ENV: test

      - name: "🔗 Tests d'Intégration"
        run: npm run test:integration
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: testuser
          DB_PASSWORD: testpass
          NODE_ENV: test

      - name: "🛠️ Build de l'application"
        run: npm run build

  quality-analysis:
    name: "2. Analyse Qualité SonarQube"
    needs: setup-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: "🛎️ Checkout du code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🐳 Démarrer SonarQube"
        run: |
          docker run -d \
            --name sonarqube \
            -p 9000:9000 \
            -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
            sonarqube:9.9.1-community
          timeout 300 bash -c 'while ! curl -sSf ${{ env.SONAR_HOST_URL }}/api/system/status | grep -q "\"status\":\"UP\""; do
            sleep 10
            echo "En attente du démarrage..."
          done'

      - name: "🔍 Exécuter analyse SonarQube"
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=gestion-trajet-app
            -Dsonar.sources=src
            -Dsonar.tests=test
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.test.inclusions=**/*.test.js
            -Dsonar.qualitygate.wait=true

      - name: "🧹 Nettoyer SonarQube"
        if: always()
        run: docker rm -f sonarqube || true

  deploy-staging:
    name: "3. Déploiement Staging"
    needs: quality-analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: "🛎️ Checkout du code"
        uses: actions/checkout@v4

      - name: "🔐 Login Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: "🏗️ Build et Push Docker"
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/gestion-trajet:staging-${{ github.sha }}

      - name: "🚀 Déployer sur Staging"
        working-directory: ./infra
        run: |
          terraform init -backend-config="env/staging.backend.tfvars"
          terraform validate
          terraform apply -auto-approve -var-file="env/staging.tfvars"

  e2e-tests:
    name: "4. Tests End-to-End"
    needs: deploy-staging
    runs-on: ubuntu-latest
    
    steps:
      - name: "🛎️ Checkout du code"
        uses: actions/checkout@v4

      - name: "🌐 Récupérer l'URL du staging"
        id: staging-url
        working-directory: ./infra
        run: |
          echo "STAGING_URL=$(terraform output -raw service_url)" >> $GITHUB_OUTPUT

      - name: "🧪 Exécuter tests E2E"
        run: npm run test:e2e
        env:
          APP_URL: ${{ steps.staging-url.outputs.STAGING_URL }}

  deploy-prod:
    name: "5. Déploiement Production"
    needs: e2e-tests
    if: success()
    runs-on: ubuntu-latest
    
    steps:
      - name: "🏗️ Build et Push Docker"
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/gestion-trajet:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/gestion-trajet:latest

      - name: "🚀 Déployer en Production"
        working-directory: ./infra
        run: |
          terraform init -backend-config="env/prod.backend.tfvars"
          terraform validate
          terraform apply -auto-approve -var-file="env/prod.tfvars"

  monitoring-check:
    name: "6. Vérification Monitoring"
    needs: deploy-prod
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: "📊 Vérifier Prometheus"
        run: |
          # Attendre que Prometheus soit disponible
          timeout 60 bash -c 'while ! curl -sSf ${{ env.PROMETHEUS_URL }}/-/ready; do
            sleep 5
            echo "En attente de Prometheus..."
          done'
          
          # Vérifier les targets
          curl -sS "${{ env.PROMETHEUS_URL }}/api/v1/targets" | \
            jq -e '.data.activeTargets[] | select(.labels.job=="gestion-trajet" and .health=="up")' || \
            echo "::warning::Target Prometheus non trouvée"
          
          # Vérifier les métriques
          curl -sS "${{ env.PROMETHEUS_URL }}/api/v1/query?query=up{job='gestion-trajet'}" | \
            jq -e '.data.result[0].value[1] == "1"' || \
            echo "::warning::Métriques non disponibles"

      - name: "📈 Vérifier Grafana"
        run: |
          # Attendre que Grafana soit disponible
          timeout 60 bash -c 'while ! curl -sSf ${{ env.GRAFANA_URL }}/api/health; do
            sleep 5
            echo "En attente de Grafana..."
          done'
          
          # Vérifier la santé
          curl -sS "${{ env.GRAFANA_URL }}/api/health" | \
            jq -e '.database == "ok"' || \
            { echo "::error::Grafana non opérationnel"; exit 1; }
          
          # Vérifier le dashboard
          curl -sS -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            "${{ env.GRAFANA_URL }}/api/dashboards/uid/${{ env.GRAFANA_DASHBOARD_UID }}" | \
            jq -e '.dashboard' || \
            echo "::warning::Dashboard Grafana non trouvé"

  notify:
    name: "7. Notifications Finales"
    needs: [deploy-prod, monitoring-check]
    runs-on: ubuntu-latest
    
    steps:
      - name: "🌐 Récupérer l'URL de production"
        id: prod-url
        working-directory: ./infra
        run: |
          echo "PROD_URL=$(terraform output -raw service_url)" >> $GITHUB_OUTPUT

      - name: "📧 Envoyer rapport complet"
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          from: ${{ env.EMAIL_FROM }}
          to: ${{ env.YOUR_EMAIL }}
          subject: "Déploiement terminé - ${{ github.repository }}"
          body: |
            Statut: ${{ job.status }}
            
            Détails :
            - Application: ${{ steps.prod-url.outputs.PROD_URL }}
            - Commit: ${{ github.sha }}
            - Date: $(date)
            
            Monitoring:
            - Prometheus: ${{ env.PROMETHEUS_URL }}
            - Grafana: ${{ env.GRAFANA_URL }}/d/${{ env.GRAFANA_DASHBOARD_UID }}
            
            Logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}