name: CI/CD - Pipeline DevOps complet

on:
  push:
    branches:
      - main

env:
  # Configurations de base
  NODE_VERSION: 20
  DOCKER_REGISTRY: docker.io
  NAMESPACE: microservice
  TERRAFORM_VERSION: 1.5.5
  K3S_VERSION: v1.26.5+k3s1
  
  # Monitoring
  PROMETHEUS_URL: http://prometheus-server:9090
  GRAFANA_URL: http://grafana-service:3000
  GRAFANA_DASHBOARD_UID: gestion-trajet-dashboard
  
  # SonarQube
  SONAR_HOST_URL: http://localhost:9000
  
  # Email
  YOUR_EMAIL: elmbarkirabea@gmail.com
  EMAIL_FROM: "GitHub Actions <actions@github.com>"

jobs:
  setup-and-test:
    name: "1. Setup et Tests"
    runs-on: ubuntu-latest
    
    steps:
      - name: "🛎️ Checkout du code"
        uses: actions/checkout@v4.1.1

      - name: "⎔ Configurer Node.js"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "📦 Installer les dépendances"
        run: npm ci

      - name: "🧪 Tests Unitaires"
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: "📊 Générer le rapport de couverture"
        run: |
          mkdir -p coverage
          npm run coverage

      - name: "🔗 Tests d'Intégration"
        run: npm run test:integration
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: testuser
          DB_PASSWORD: testpass
          NODE_ENV: test

  sonarqube-analysis:
    name: "2. Analyse Qualité avec SonarQube"
    needs: setup-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: "🐳 Démarrer SonarQube"
        run: |
          docker run -d \
            --name sonarqube \
            -p 9000:9000 \
            -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
            sonarqube:9.9.1-community
          timeout 300 bash -c 'while ! curl -sSf ${{ env.SONAR_HOST_URL }}/api/system/status | grep -q "\"status\":\"UP\""; do
            sleep 10
            echo "En attente du démarrage..."
          done'

      - name: "🔑 Générer token SonarQube"
        run: |
          SONAR_TOKEN=$(curl -sS -u admin:admin \
            -X POST "${{ env.SONAR_HOST_URL }}/api/user_tokens/generate" \
            -d "name=github-action-$(date +%s)" \
            | jq -r '.token')
          echo "SONAR_TOKEN=$SONAR_TOKEN" >> $GITHUB_ENV
          echo "::add-mask::$SONAR_TOKEN"

      - name: "🔍 Exécuter analyse SonarQube"
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=gestion-trajet-app
            -Dsonar.sources=src
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.tests=test
            -Dsonar.test.inclusions=test/**/*.test.js

      - name: "🧹 Nettoyer SonarQube"
        if: always()
        run: docker rm -f sonarqube || true

  docker-deploy:
    name: "3. Déploiement Docker/K8s"
    needs: sonarqube-analysis
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4.1.1

      - name: "🔐 Login Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: "🏗️ Build et Push Docker"
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/gestion-trajet:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/gestion-trajet:latest

      - name: "🖥️ Installer et Configurer K3s"
        run: |
          # Installer K3s
          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=${{ env.K3S_VERSION }} sh -
          
          # Configurer kubectl
          mkdir -p $HOME/.kube
          sudo cp /etc/rancher/k3s/k3s.yaml $HOME/.kube/config
          sudo chown $(id -u):$(id -g) $HOME/.kube/config
          export KUBECONFIG=$HOME/.kube/config
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV
          
          # Vérifier l'installation
          kubectl cluster-info
          kubectl get nodes

      - name: "⚙️ Installer Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: "🚀 Déployer l'infrastructure"
        working-directory: ./infra
        env:
          TF_VAR_docker_username: ${{ secrets.DOCKER_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_image_tag: ${{ github.sha }}
        run: |
          terraform init
          terraform validate
          terraform apply -auto-approve

  monitoring-check:
    name: "4. Vérification Monitoring"
    needs: docker-deploy
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: "🔍 Vérifier l'état du cluster"
        run: |
          kubectl get pods -A
          kubectl get svc -A

      - name: "📊 Vérifier Prometheus"
        run: |
          # Setup port-forward
          kubectl port-forward svc/prometheus-server 9090:9090 -n monitoring --address=0.0.0.0 &
          sleep 5
          
          # Vérifier les targets
          curl -s "http://localhost:9090/api/v1/targets" | \
            jq -e '.data.activeTargets[] | select(.labels.job=="gestion-trajet")' || \
            echo "::warning::Target 'gestion-trajet' non trouvée"

      - name: "📈 Vérifier Grafana"
        run: |
          # Setup port-forward
          kubectl port-forward svc/grafana 3000:3000 -n monitoring --address=0.0.0.0 &
          sleep 5
          
          # Vérifier l'API health
          curl -s "http://localhost:3000/api/health" | jq -e '.database == "ok"'

  notify:
    name: "5. Notification Finale"
    needs: [docker-deploy, monitoring-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: "🌐 Récupérer l'URL du service"
        id: get-url
        working-directory: ./infra
        run: |
          if [ -f "output.tf" ]; then
            echo "SERVICE_URL=$(terraform output -raw service_url)" >> $GITHUB_OUTPUT
          else
            echo "::warning::Fichier output.tf non trouvé"
            echo "SERVICE_URL=non-disponible" >> $GITHUB_OUTPUT
          fi

      - name: "📧 Envoyer rapport"
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          from: ${{ env.EMAIL_FROM }}
          to: ${{ env.YOUR_EMAIL }}
          subject: "Déploiement terminé - ${{ github.sha }}"
          body: |
            Résultat: ${{ job.status }}
            
            Détails:
            - Service: ${{ steps.get-url.outputs.SERVICE_URL }}
            - Commit: ${{ github.sha }}
            - Date: $(date)
            
            Logs complets:
            https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}