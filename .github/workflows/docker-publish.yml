name: CI/CD Pipeline DevOps Compl√®te

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  # Versions
  NODE_VERSION: 20
  K3S_VERSION: v1.26.5+k3s1
  TERRAFORM_VERSION: 1.5.5
  
  # Environnements
  NAMESPACE: microservice
  DOCKER_REGISTRY: docker.io
  
  # Monitoring
  PROMETHEUS_URL: http://prometheus:9090
  GRAFANA_URL: http://grafana:3000
  ALERTMANAGER_URL: http://alertmanager:9093
  
  # URLs
  SONAR_HOST_URL: http://localhost:9000
  SLACK_CHANNEL: '#devops-alerts'

jobs:
  ################################################################
  # √âTAPE 1: V√©rification et Tests
  ################################################################
  setup-and-test:
    name: "1. V√©rification et Tests"
    runs-on: ubuntu-latest
    
    steps:
      - name: "üõéÔ∏è Checkout du code"
        uses: actions/checkout@v4

      - name: "‚éî Configurer Node.js"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "üì¶ Installer les d√©pendances"
        run: npm ci

      - name: "üîç Linter le code"
        run: npm run lint

      - name: "üß™ Tests Unitaires"
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: "üìä Couverture de code"
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/

      - name: "üîó Tests d'Int√©gration"
        run: npm run test:integration
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: testuser
          DB_PASSWORD: testpass
          NODE_ENV: test

      - name: "üõ†Ô∏è Build de l'application"
        run: npm run build

  ################################################################
  # √âTAPE 2: Analyse Qualit√©
  ################################################################
  quality-analysis:
    name: "2. Analyse Qualit√©"
    needs: setup-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: "üõéÔ∏è Checkout du code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "üì• T√©l√©charger le rapport de couverture"
        uses: actions/download-artifact@v3
        with:
          name: coverage-report

      - name: "üê≥ D√©marrer SonarQube"
        run: |
          docker run -d \
            --name sonarqube \
            -p 9000:9000 \
            -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
            sonarqube:9.9.1-community
          timeout 300 bash -c 'while ! curl -sSf ${{ env.SONAR_HOST_URL }}/api/system/status | grep -q "\"status\":\"UP\""; do
            sleep 10
            echo "En attente du d√©marrage..."
          done'

      - name: "üîë G√©n√©rer token SonarQube"
        run: |
          SONAR_TOKEN=$(curl -sS -u admin:admin \
            -X POST "${{ env.SONAR_HOST_URL }}/api/user_tokens/generate" \
            -d "name=github-action-$(date +%s)" \
            | jq -r '.token')
          echo "SONAR_TOKEN=$SONAR_TOKEN" >> $GITHUB_ENV
          echo "::add-mask::$SONAR_TOKEN"

      - name: "üîç Ex√©cuter analyse SonarQube"
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=gestion-trajet-app
            -Dsonar.sources=src
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.qualitygate.wait=true

      - name: "üßπ Nettoyer SonarQube"
        if: always()
        run: docker rm -f sonarqube || true

  ################################################################
  # √âTAPE 3: D√©ploiement Staging
  ################################################################
  deploy-staging:
    name: "3. D√©ploiement Staging"
    needs: quality-analysis
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: "üõéÔ∏è Checkout du code"
        uses: actions/checkout@v4

      - name: "üîê Login Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: "üèóÔ∏è Build Docker (Staging)"
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/gestion-trajet:staging-${{ github.sha }}
          labels: |
            environment=staging
            commit=${{ github.sha }}
            build-date=${{ github.run_number }}

      - name: "üñ•Ô∏è Installer K3s (Staging)"
        run: |
          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=${{ env.K3S_VERSION }} sh -
          sudo chmod 644 /etc/rancher/k3s/k3s.yaml

      - name: "‚öôÔ∏è Configurer kubectl"
        run: |
          mkdir -p $HOME/.kube
          sudo cp /etc/rancher/k3s/k3s.yaml $HOME/.kube/config
          sudo chown $(id -u):$(id -g) $HOME/.kube/config

      - name: "‚öôÔ∏è Installer Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: "üöÄ D√©ployer sur Staging"
        working-directory: ./infra
        env:
          TF_VAR_docker_username: ${{ secrets.DOCKER_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_image_tag: staging-${{ github.sha }}
          TF_VAR_environment: staging
        run: |
          terraform init -backend-config="env/staging.backend.tfvars"
          terraform validate
          terraform plan -var-file="env/staging.tfvars"
          terraform apply -auto-approve -var-file="env/staging.tfvars"

      - name: "üîç V√©rifier le d√©ploiement staging"
        run: |
          kubectl get all -n ${{ env.NAMESPACE }}
          echo "Staging URL: $(terraform -chdir=infra output -raw service_url)"

  ################################################################
  # √âTAPE 4: Tests End-to-End
  ################################################################
  e2e-tests:
    name: "4. Tests End-to-End"
    needs: deploy-staging
    runs-on: ubuntu-latest
    
    steps:
      - name: "üõéÔ∏è Checkout du code"
        uses: actions/checkout@v4

      - name: "‚éî Configurer Node.js"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: "üåê R√©cup√©rer l'URL du staging"
        id: staging-url
        working-directory: ./infra
        run: |
          echo "STAGING_URL=$(terraform output -raw service_url)" >> $GITHUB_OUTPUT

      - name: "üß™ Ex√©cuter tests E2E"
        run: npm run test:e2e
        env:
          APP_URL: ${{ steps.staging-url.outputs.STAGING_URL }}
          NODE_ENV: testing

      - name: "üìä G√©n√©rer rapport de tests"
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-report
          path: cypress/reports/

  ################################################################
  # √âTAPE 5: D√©ploiement Production
  ################################################################
  deploy-prod:
    name: "5. D√©ploiement Production"
    needs: e2e-tests
    if: success()
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: "üõéÔ∏è Checkout du code"
        uses: actions/checkout@v4

      - name: "üîê Login Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: "üèóÔ∏è Build Docker (Production)"
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/gestion-trajet:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/gestion-trajet:latest
          labels: |
            environment=production
            commit=${{ github.sha }}
            build-date=${{ github.run_number }}

      - name: "‚öôÔ∏è Installer Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: "üöÄ D√©ployer en Production"
        working-directory: ./infra
        env:
          TF_VAR_docker_username: ${{ secrets.DOCKER_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_image_tag: ${{ github.sha }}
          TF_VAR_environment: production
        run: |
          terraform init -backend-config="env/prod.backend.tfvars"
          terraform validate
          terraform plan -var-file="env/prod.tfvars"
          terraform apply -auto-approve -var-file="env/prod.tfvars"

      - name: "üîç V√©rifier le d√©ploiement production"
        run: |
          kubectl get all -n ${{ env.NAMESPACE }}
          echo "Production URL: $(terraform -chdir=infra output -raw service_url)"

  ################################################################
  # √âTAPE 6: V√©rification Monitoring
  ################################################################
  monitoring-check:
    name: "6. V√©rification Monitoring"
    needs: deploy-prod
    runs-on: ubuntu-latest
    
    steps:
      - name: "üìä V√©rifier Prometheus"
        run: |
          # Attendre que les m√©triques soient disponibles
          timeout 120 bash -c 'until curl -s "${{ env.PROMETHEUS_URL }}/api/v1/query?query=up{job=\"gestion-trajet\"}" | jq -e ".data.result[0].value[1] == \"1\""; do
            sleep 5
            echo "En attente des m√©triques..."
          done'

          # V√©rifier les m√©triques custom
          curl -s "${{ env.PROMETHEUS_URL }}/api/v1/query?query=http_request_duration_seconds_count" | \
            jq -e '.data.result[0].value[1] != "0"'

      - name: "üìà V√©rifier Grafana"
        run: |
          # V√©rifier la sant√© de Grafana
          curl -s -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            "${{ env.GRAFANA_URL }}/api/health" | \
            jq -e '.database == "ok"' || exit 1

          # V√©rifier que le dashboard existe
          curl -s -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            "${{ env.GRAFANA_URL }}/api/dashboards/uid/gestion-trajet-dashboard" | \
            jq -e '.dashboard'

      - name: "üö® V√©rifier Alertmanager"
        run: |
          curl -s "${{ env.ALERTMANAGER_URL }}/api/v1/status" | \
            jq -e '.config.original'

  ################################################################
  # √âTAPE 7: Rollback Automatique
  ################################################################
  rollback-on-failure:
    name: "üö® Rollback Automatique"
    if: failure() && needs.deploy-prod.result == 'failure'
    needs: deploy-prod
    runs-on: ubuntu-latest
    
    steps:
      - name: "‚öôÔ∏è Configurer kubectl"
        run: |
          mkdir -p $HOME/.kube
          sudo cp /etc/rancher/k3s/k3s.yaml $HOME/.kube/config
          sudo chown $(id -u):$(id -g) $HOME/.kube/config

      - name: "‚Ü©Ô∏è Effectuer le rollback"
        run: |
          kubectl rollout undo deployment/gestion-trajet -n ${{ env.NAMESPACE }}
          kubectl rollout status deployment/gestion-trajet -n ${{ env.NAMESPACE }} --timeout=120s

      - name: "üìù Logs des pods"
        if: always()
        run: |
          kubectl get pods -n ${{ env.NAMESPACE }}
          kubectl logs -n ${{ env.NAMESPACE }} -l app=gestion-trajet --tail=50

      - name: "‚ö†Ô∏è Notifier l'√©chec"
        uses: slackapi/slack-github-action@v1
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        with:
          payload: |
            {
              "channel": "${{ env.SLACK_CHANNEL }}",
              "text": "√âchec du d√©ploiement en production - Rollback effectu√©",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":x: *√âchec du d√©ploiement en production*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${{ github.sha }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Workflow:*\n${{ github.workflow }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Cause:*\n${{ needs.deploy-prod.result }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Voir les logs"
                      },
                      "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }

  ################################################################
  # √âTAPE 8: Notifications Finales
  ################################################################
  notify-success:
    name: "üì¢ Notifications de Succ√®s"
    if: success()
    needs: [deploy-prod, monitoring-check]
    runs-on: ubuntu-latest
    
    steps:
      - name: "üåê R√©cup√©rer l'URL de production"
        id: prod-url
        working-directory: ./infra
        run: |
          echo "PROD_URL=$(terraform output -raw service_url)" >> $GITHUB_OUTPUT

      - name: "üìä R√©cup√©rer les m√©triques"
        id: metrics
        run: |
          echo "METRICS=$(curl -s '${{ env.PROMETHEUS_URL }}/api/v1/query?query=up{job=\"gestion-trajet\"}' | jq '.data.result[0].value[1]')" >> $GITHUB_OUTPUT

      - name: "üì¢ Notifier Slack"
        uses: slackapi/slack-github-action@v1
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        with:
          payload: |
            {
              "channel": "${{ env.SLACK_CHANNEL }}",
              "text": "D√©ploiement r√©ussi en production",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":white_check_mark: *D√©ploiement r√©ussi en production*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${GITHUB_SHA:0:7}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Environnement:*\nProduction"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Statut Monitoring:*\n${{ steps.metrics.outputs.METRICS == '1' ? 'OK' : 'NOK' }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*URL de production:*\n<${{ steps.prod-url.outputs.PROD_URL }}>"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Voir l'application"
                      },
                      "url": "${{ steps.prod-url.outputs.PROD_URL }}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Voir les logs"
                      },
                      "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Voir Grafana"
                      },
                      "url": "${{ env.GRAFANA_URL }}/d/gestion-trajet-dashboard"
                    }
                  ]
                }
              ]
            }