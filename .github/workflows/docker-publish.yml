name: CI/CD - Pipeline DevOps & K3s Deployment

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    services:
      sonarqube:
        image: sonarqube:lts-community
        ports:
          - 9000:9000
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
        options: >-
          --health-cmd "curl -f http://localhost:9000/api/server/version || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 60  # Attendre jusqu'à 5 minutes (60 x 5s)
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Étape 1 : Installer les dépendances
      - name: 📦 Installer les dépendances
        run: npm install

      # Étape 2 : Lancer les tests unitaires
      - name: 🎯 Lancer les tests unitaires
        run: npm test

      # Étape 3 : Attendre que SonarQube soit prêt (version robuste)
      - name: ⏳ Attendre que SonarQube soit prêt (10 min max)
        timeout-minutes: 10
        run: |
          echo "Début de l'attente pour SonarQube..."
          for i in {1..60}; do
            if curl -sSf http://localhost:9000/api/server/version >/dev/null; then
              echo "SonarQube est prêt!"
              exit 0
            fi
            echo "Attente du démarrage de SonarQube (tentative $i/60)..."
            sleep 10
          done
          echo "Erreur: SonarQube n'a pas démarré dans le délai imparti"
          exit 1

      # Étape 4 : Analyser la qualité du code avec SonarQube
      - name: 🔍 Analyser la qualité du code avec SonarQube
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://localhost:9000

      # Étape 5 : Vérifier la Quality Gate
      - name: 🚦 Vérifier la Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 10
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-and-push:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 🛎️ Checkout du code
        uses: actions/checkout@v3

      - name: 🔑 Connexion à Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 🔨 Construire l'image Docker
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/gestion_trajet:latest .

      - name: 🚀 Pousser l'image sur Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/gestion_trajet:latest

  deploy-to-k3s:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: 🛎️ Checkout du code
        uses: actions/checkout@v3

      - name: 🔧 Installer K3s
        timeout-minutes: 10
        run: |
          curl -sfL https://get.k3s.io | sh -
          sudo chmod 644 /etc/rancher/k3s/k3s.yaml

      - name: 🔑 Configurer KUBECONFIG
        run: |
          mkdir -p $HOME/.kube
          sudo cp /etc/rancher/k3s/k3s.yaml $HOME/.kube/config
          sudo chown $(id -u):$(id -g) $HOME/.kube/config

      - name: 🚀 Déployer sur K3s
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml

      - name: 🏥 Vérifier les Pods
        run: kubectl get pods -o wide

      - name: 📡 Vérifier les Services
        run: kubectl get svc gestion-trajet-service

      - name: 🌍 Vérifier l'Ingress
        run: kubectl get ingress